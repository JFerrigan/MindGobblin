name: Build & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE: jferrigan/jake-server
  CONTAINER_NAME: jake-srv
  PORT: "8080"                  # your app listens on this in the container

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (amd64+arm64)
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          # Optional caching:
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy on VPS over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            IMAGE="${{ env.IMAGE }}"
            TAG="latest"
            CONTAINER="${{ env.CONTAINER_NAME }}"
            PORT="${{ env.PORT }}"

            # If your Hub repo is private, uncomment the next two lines:
            # echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            echo "Pulling image ${IMAGE}:${TAG}"
            docker pull "${IMAGE}:${TAG}"

            echo "Stopping old container (if any)"I
            docker rm -f "${CONTAINER}" >/dev/null 2>&1 || true

            echo "Starting new container"
            docker run -d --restart unless-stopped --name "${CONTAINER}" \
              -e ASPNETCORE_URLS="http://0.0.0.0:${PORT}" \
              -e SPOTIFY_CLIENT_ID="${{ secrets.SPOTIFY_CLIENT_ID }}" \
              -e SPOTIFY_CLIENT_SECRET="${{ secrets.SPOTIFY_CLIENT_SECRET }}" \
              -e SPOTIFY_REDIRECT_URI="${{ secrets.SPOTIFY_REDIRECT_URI }}" \
              -e CR_TOKEN="${{ secrets.CR_TOKEN }}" \
              -e PLACE_DATA_PATH="/data/place-board.bin" \
              -v /srv/mindgobblin/data:/data \
              -v /srv/mindgobblin/dp-keys:/app/keys \
              -p 127.0.0.1:${PORT}:${PORT} \
              "${IMAGE}:${TAG}"

            echo "Deployed ${IMAGE}:${TAG} on 127.0.0.1:${PORT}"
